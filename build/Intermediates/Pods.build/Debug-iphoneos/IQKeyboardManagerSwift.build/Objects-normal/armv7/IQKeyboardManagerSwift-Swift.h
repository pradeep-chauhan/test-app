// Generated by Apple Swift version 1.2 (swiftlang-602.0.53.1 clang-602.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIFont;
@class UIGestureRecognizer;
@class UITouch;


/// <dl><dt>---------------------</dt><dd><p>MARK: IQToolbar tags</p></dd></dl>
/// ---------------------
///
/// Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more. A generic version of KeyboardManagement. https://developer.apple.com/Library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html
SWIFT_CLASS("_TtC22IQKeyboardManagerSwift17IQKeyboardManager")
@interface IQKeyboardManager : NSObject <UIGestureRecognizerDelegate>

/// <dl><dt>---------------------------</dt><dd><p>MARK: UIKeyboard handling</p></dd></dl>
/// ---------------------------
///
/// <blockquote><p>Enable/disable managing distance between keyboard and textField. Default is YES(Enabled when class loads in <code>+(void)load</code> method).</p></blockquote>
@property (nonatomic) BOOL enable;

/// To set keyboard distance from textField. can't be less than zero. Default is 10.0.
@property (nonatomic) CGFloat keyboardDistanceFromTextField;

/// Prevent keyboard manager to slide up the rootView to more than keyboard height. Default is YES.
@property (nonatomic) BOOL preventShowingBottomBlankSpace;

/// Returns the default singleton instance.
+ (IQKeyboardManager * __nonnull)sharedManager;

/// <dl><dt>-------------------------</dt><dd><p>MARK: IQToolbar handling</p></dd></dl>
/// -------------------------
///
/// <blockquote><p>Automatic add the IQToolbar functionality. Default is YES.</p></blockquote>
@property (nonatomic) BOOL enableAutoToolbar;

/// If YES, then uses textField's tintColor property for IQToolbar, otherwise tint color is black. Default is NO.
@property (nonatomic) BOOL shouldToolbarUsesTextFieldTintColor;

/// If YES, then it add the textField's placeholder text on IQToolbar. Default is YES.
@property (nonatomic) BOOL shouldShowTextFieldPlaceholder;

/// Placeholder Font. Default is nil.
@property (nonatomic) UIFont * __nullable placeholderFont;

/// <dl><dt>--------------------------</dt><dd><p>MARK: UITextView handling</p></dd></dl>
/// --------------------------
///
/// <blockquote><p>Adjust textView's frame when it is too big in height. Default is NO.</p></blockquote>
@property (nonatomic) BOOL canAdjustTextView;

/// Adjust textView's contentInset to fix a bug. for iOS 7.0.x - http://stackoverflow.com/questions/18966675/uitextview-in-ios7-clips-the-last-line-of-text-string Default is YES.
@property (nonatomic) BOOL shouldFixTextViewClip;

/// <dl><dt>---------------------------------------</dt><dd><p>MARK: UIKeyboard appearance overriding</p></dd></dl>
/// ---------------------------------------
///
/// <blockquote><p>Override the keyboardAppearance for all textField/textView. Default is NO.</p></blockquote>
@property (nonatomic) BOOL overrideKeyboardAppearance;

/// If overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
@property (nonatomic) BOOL shouldResignOnTouchOutside;

/// Resigns currently first responder field.
- (BOOL)resignFirstResponder;

/// Returns YES if can navigate to previous responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoPrevious;

/// Returns YES if can navigate to next responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoNext;

/// Navigate to previous responder textField/textView.
- (BOOL)goPrevious;

/// Navigate to next responder textField/textView.
- (BOOL)goNext;

/// Note: returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture's delegate may return YES. 
- (BOOL)gestureRecognizer:(UIGestureRecognizer * __nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * __nonnull)otherGestureRecognizer;

/// To not detect touch events in a subclass of UIControl, these may have added their own selector for specific work 
- (BOOL)gestureRecognizer:(UIGestureRecognizer * __nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * __nonnull)touch;

/// <dl><dt>----------------------------</dt><dd><p>MARK: UIScrollView handling</p></dd></dl>
/// ----------------------------
///
/// <blockquote><p>Restore scrollViewContentOffset when resigning from scrollView. Default is NO.</p></blockquote>
@property (nonatomic) BOOL shouldRestoreScrollViewContentOffset;

/// <dl><dt>-----------------------</dt><dd><p>MARK: UISound handling</p></dd></dl>
/// -----------------------
///
/// <blockquote><p>If YES, then it plays inputClick sound on next/previous/done click.</p></blockquote>
@property (nonatomic) BOOL shouldPlayInputClicks;

/// <dl><dt>---------------------------</dt><dd><p>MARK: UIAnimation handling</p></dd></dl>
/// ---------------------------
///
/// <blockquote><p>If YES, then uses keyboard default animation curve style to move view, otherwise uses UIViewAnimationOptionCurveEaseInOut animation style. Default is YES.</p><p>@warning Sometimes strange animations may be produced if uses default curve style animation in iOS 7 and changing the textFields very frequently.</p></blockquote>
@property (nonatomic) BOOL shouldAdoptDefaultKeyboardAnimation;

/// If YES, then calls 'setNeedsLayout' and 'layoutIfNeeded' on any frame update of to viewController's view.
@property (nonatomic) BOOL layoutIfNeededOnUpdate;

/// <dl><dt>------------------------------------</dt><dd><p>MARK: Class Level disabling methods</p></dd></dl>
/// ------------------------------------
///
/// <blockquote><p>Disable adjusting view in disabledClass</p><p>@param disabledClass Class in which library should not adjust view to show textField.</p></blockquote>
- (void)disableInViewControllerClass:(Class __nonnull)disabledClass;

/// Re-enable adjusting textField in disabledClass
///
/// @param disabledClass Class in which library should re-enable adjust view to show textField.
- (void)removeDisableInViewControllerClass:(Class __nonnull)disabledClass;

/// Returns YES if ViewController class is disabled for library, otherwise returns NO.
///
/// @param disabledClass Class which is to check for it's disability.
- (BOOL)isDisableInViewControllerClass:(Class __nonnull)disabledClass;

/// Disable automatic toolbar creation in in toolbarDisabledClass
///
/// @param toolbarDisabledClass Class in which library should not add toolbar over textField.
- (void)disableToolbarInViewControllerClass:(Class __nonnull)toolbarDisabledClass;

/// Re-enable automatic toolbar creation in in toolbarDisabledClass
///
/// @param toolbarDisabledClass Class in which library should re-enable automatic toolbar creation over textField.
- (void)removeDisableToolbarInViewControllerClass:(Class __nonnull)toolbarDisabledClass;

/// Returns YES if toolbar is disabled in ViewController class, otherwise returns NO.
///
/// @param toolbarDisabledClass Class which is to check for toolbar disability.
- (BOOL)isDisableToolbarInViewControllerClass:(Class __nonnull)toolbarDisabledClass;

/// Consider provided customView class as superView of all inner textField for calculating next/previous button logic.
///
/// @param toolbarPreviousNextConsideredClass Custom UIView subclass Class in which library should consider all inner textField as siblings and add next/previous accordingly.
- (void)considerToolbarPreviousNextInViewClass:(Class __nonnull)toolbarPreviousNextConsideredClass;

/// Remove Consideration for provided customView class as superView of all inner textField for calculating next/previous button logic.
///
/// @param toolbarPreviousNextConsideredClass Custom UIView subclass Class in which library should remove consideration for all inner textField as superView.
- (void)removeConsiderToolbarPreviousNextInViewClass:(Class __nonnull)toolbarPreviousNextConsideredClass;

/// Returns YES if inner hierarchy is considered for previous/next in class, otherwise returns NO.
///
/// @param toolbarPreviousNextConsideredClass Class which is to check for previous next consideration
- (BOOL)isConsiderToolbarPreviousNextInViewClass:(Class __nonnull)toolbarPreviousNextConsideredClass;
@end

@class UIView;
@class UITextField;
@class UITextView;
@class NSURL;
@class NSTextAttachment;


/// Manages the return key to work like next/done in a view hierarchy.
SWIFT_CLASS("_TtC22IQKeyboardManagerSwift26IQKeyboardReturnKeyHandler")
@interface IQKeyboardReturnKeyHandler : NSObject <UITextFieldDelegate, UITextViewDelegate>

/// <dl><dt>---------------</dt><dd><p>MARK: Settings</p></dd></dl>
/// ---------------
///
/// <blockquote><p>Delegate of textField/textView.</p></blockquote>
@property (nonatomic) id <UITextFieldDelegate, UITextViewDelegate> __nullable delegate;

/// Set the last textfield return key type. Default is UIReturnKeyDefault.
@property (nonatomic) UIReturnKeyType lastTextFieldReturnKeyType;

/// <dl><dt>----------------------------------------------</dt><dd><p>MARK: Registering/Unregistering textFieldView</p></dd></dl>
/// ----------------------------------------------
///
/// <blockquote><p>Should pass UITextField/UITextView intance. Assign textFieldView delegate to self, change it's returnKeyType.</p><p>@param textFieldView UITextField/UITextView object to register.</p></blockquote>
- (void)addTextFieldView:(UIView * __nonnull)view;

/// Should pass UITextField/UITextView intance. Restore it's textFieldView delegate and it's returnKeyType.
///
/// @param textFieldView UITextField/UITextView object to unregister.
- (void)removeTextFieldView:(UIView * __nonnull)view;

/// Add all the UITextField/UITextView responderView's.
///
/// @param UIView object to register all it's responder subviews.
- (void)addResponderFromView:(UIView * __nonnull)view;

/// Remove all the UITextField/UITextView responderView's.
///
/// @param UIView object to unregister all it's responder subviews.
- (void)removeResponderFromView:(UIView * __nonnull)view;

/// <dl><dt>----------------------------------------------</dt><dd><p>MARK: UITextField/UITextView delegates</p></dd></dl>
/// ----------------------------------------------
- (BOOL)textFieldShouldBeginEditing:(UITextField * __nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * __nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * __nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * __nonnull)textField;
- (BOOL)textField:(UITextField * __nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * __nonnull)string;
- (BOOL)textFieldShouldClear:(UITextField * __nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * __nonnull)textField;
- (BOOL)textViewShouldBeginEditing:(UITextView * __nonnull)textView;
- (BOOL)textViewShouldEndEditing:(UITextView * __nonnull)textView;
- (void)textViewDidBeginEditing:(UITextView * __nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * __nonnull)textView;
- (BOOL)textView:(UITextView * __nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * __nonnull)text;
- (void)textViewDidChange:(UITextView * __nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * __nonnull)textView;
- (BOOL)textView:(UITextView * __nonnull)textView shouldInteractWithURL:(NSURL * __nonnull)URL inRange:(NSRange)characterRange;
- (BOOL)textView:(UITextView * __nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * __nonnull)textAttachment inRange:(NSRange)characterRange;
@end

@class NSCoder;


/// @abstract UITextView with placeholder support   
SWIFT_CLASS("_TtC22IQKeyboardManagerSwift10IQTextView")
@interface IQTextView : UITextView
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;

/// @abstract To set textView's placeholder text. Default is ni.    
@property (nonatomic, copy) NSString * __nullable placeholder;
@property (nonatomic, copy, getter=text, setter=setText:) NSString * __null_unspecified text;
@property (nonatomic, getter=font, setter=setFont:) UIFont * __nullable font;
@property (nonatomic, getter=delegate, setter=setDelegate:) id <UITextViewDelegate> __nullable delegate;
@end


SWIFT_CLASS("_TtC22IQKeyboardManagerSwift20IQTitleBarButtonItem")
@interface IQTitleBarButtonItem : UIBarButtonItem
@property (nonatomic) UIFont * __nullable font;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;


/// @abstract   IQToolbar for IQKeyboardManager.    
SWIFT_CLASS("_TtC22IQKeyboardManagerSwift9IQToolbar")
@interface IQToolbar : UIToolbar <UIInputViewAudioFeedback>
+ (void)initialize;
@property (nonatomic) UIFont * __nullable titleFont;
@property (nonatomic, copy) NSString * __nullable title;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size;
@property (nonatomic, getter=tintColor, setter=setTintColor:) UIColor * __null_unspecified tintColor;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end


@interface NSObject (SWIFT_EXTENSION(IQKeyboardManagerSwift))
- (NSString * __nonnull)_IQDescription;
@end


@interface UIView (SWIFT_EXTENSION(IQKeyboardManagerSwift))

/// To set customized distance from keyboard for textField/textView. Can't be less than zero
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
@end

@class UIViewController;

@interface UIView (SWIFT_EXTENSION(IQKeyboardManagerSwift))

/// <dl><dt>------------------------------</dt><dd><p>MARK: canBecomeFirstResponder</p></dd></dl>
/// ------------------------------
///
/// <blockquote><p>Returns YES if IQKeyboardManager asking for <code>canBecomeFirstResponder. Useful when doing custom work in `textFieldShouldBeginEditing:</code> delegate.</p></blockquote>
@property (nonatomic) BOOL isAskingCanBecomeFirstResponder;

/// <dl><dt>----------------------</dt><dd><p>MARK: viewControllers</p></dd></dl>
/// ----------------------
///
/// <blockquote><p>Returns the UIViewController object that manages the receiver.</p></blockquote>
- (UIViewController * __nullable)viewController;

/// Returns the topMost UIViewController object in hierarchy.
- (UIViewController * __nullable)topMostController;

/// <dl><dt>-----------------------------------</dt><dd><p>MARK: Superviews/Subviews/Siglings</p></dd></dl>
/// -----------------------------------
///
/// <blockquote><p>Returns the superView of provided class type.</p></blockquote>
- (UIView * __nullable)superviewOfClassType:(Class __nonnull)classType;

/// Returns all siblings of the receiver which canBecomeFirstResponder.
- (NSArray * __nonnull)responderSiblings;

/// Returns all deep subViews of the receiver which canBecomeFirstResponder.
- (NSArray * __nonnull)deepResponderViews;

/// <dl><dt>-------------------------</dt><dd><p>MARK: Special TextFields</p></dd></dl>
/// -------------------------
///
/// <blockquote><p>Returns YES if the receiver object is UISearchBarTextField, otherwise return NO.</p></blockquote>
- (BOOL)isSearchBarTextField;

/// Returns YES if the receiver object is UIAlertSheetTextField, otherwise return NO.
- (BOOL)isAlertViewTextField;
@end


@interface UIView (SWIFT_EXTENSION(IQKeyboardManagerSwift))

/// <dl><dt>------------</dt><dd><p>MARK: Done</p></dd></dl>
/// ------------
///
/// <blockquote><p>Helper function to add Done button on keyboard.</p><p>@param target Target object for selector.
/// @param action Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.</p></blockquote>
- (void)addDoneOnKeyboardWithTarget:(id __nullable)target action:(SEL __null_unspecified)action;

/// Helper function to add Done button on keyboard.
///
/// @param target Target object for selector.
/// @param action Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param titleText text to show as title in IQToolbar'.
- (void)addDoneOnKeyboardWithTarget:(id __nullable)target action:(SEL __null_unspecified)action titleText:(NSString * __nullable)titleText;

/// Helper function to add Done button on keyboard.
///
/// @param target Target object for selector.
/// @param action Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param shouldShowPlaceholder A boolean to indicate whether to show textField placeholder on IQToolbar'.
- (void)addDoneOnKeyboardWithTarget:(id __nullable)target action:(SEL __null_unspecified)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;

/// <dl><dt>------------</dt><dd><p>MARK: Right</p></dd></dl>
/// ------------
///
/// <blockquote><p>Helper function to add Right button on keyboard.</p><p>@param text Title for rightBarButtonItem, usually 'Done'.
/// @param target Target object for selector.
/// @param action Right button action name. Usually 'doneAction:(IQBarButtonItem*)item'.</p></blockquote>
- (void)addRightButtonOnKeyboardWithText:(NSString * __nonnull)text target:(id __nullable)target action:(SEL __null_unspecified)action;

/// Helper function to add Right button on keyboard.
///
/// @param text Title for rightBarButtonItem, usually 'Done'.
/// @param target Target object for selector.
/// @param action Right button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param titleText text to show as title in IQToolbar'.
- (void)addRightButtonOnKeyboardWithText:(NSString * __nonnull)text target:(id __nullable)target action:(SEL __null_unspecified)action titleText:(NSString * __nullable)titleText;

/// Helper function to add Right button on keyboard.
///
/// @param text Title for rightBarButtonItem, usually 'Done'.
/// @param target Target object for selector.
/// @param action Right button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param shouldShowPlaceholder A boolean to indicate whether to show textField placeholder on IQToolbar'.
- (void)addRightButtonOnKeyboardWithText:(NSString * __nonnull)text target:(id __nullable)target action:(SEL __null_unspecified)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;

/// <dl><dt>------------------</dt><dd><p>MARK: Cancel/Done</p></dd></dl>
/// ------------------
///
/// <blockquote><p>Helper function to add Cancel and Done button on keyboard.</p><p>@param target Target object for selector.
/// @param cancelAction Cancel button action name. Usually 'cancelAction:(IQBarButtonItem*)item'.
/// @param doneAction Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.</p></blockquote>
- (void)addCancelDoneOnKeyboardWithTarget:(id __nullable)target cancelAction:(SEL __null_unspecified)cancelAction doneAction:(SEL __null_unspecified)doneAction;

/// Helper function to add Cancel and Done button on keyboard.
///
/// @param target Target object for selector.
/// @param cancelAction Cancel button action name. Usually 'cancelAction:(IQBarButtonItem*)item'.
/// @param doneAction Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param titleText text to show as title in IQToolbar'.
- (void)addCancelDoneOnKeyboardWithTarget:(id __nullable)target cancelAction:(SEL __null_unspecified)cancelAction doneAction:(SEL __null_unspecified)doneAction titleText:(NSString * __nullable)titleText;

/// Helper function to add Cancel and Done button on keyboard.
///
/// @param target Target object for selector.
/// @param cancelAction Cancel button action name. Usually 'cancelAction:(IQBarButtonItem*)item'.
/// @param doneAction Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param shouldShowPlaceholder A boolean to indicate whether to show textField placeholder on IQToolbar'.
- (void)addCancelDoneOnKeyboardWithTarget:(id __nullable)target cancelAction:(SEL __null_unspecified)cancelAction doneAction:(SEL __null_unspecified)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;

/// <dl><dt>-----------------</dt><dd><p>MARK: Right/Left</p></dd></dl>
/// -----------------
///
/// <blockquote><p>Helper function to add Left and Right button on keyboard.</p><p>@param target Target object for selector.
/// @param leftButtonTitle Title for leftBarButtonItem, usually 'Cancel'.
/// @param rightButtonTitle Title for rightBarButtonItem, usually 'Done'.
/// @param leftButtonAction Left button action name. Usually 'cancelAction:(IQBarButtonItem*)item'.
/// @param rightButtonAction Right button action name. Usually 'doneAction:(IQBarButtonItem*)item'.</p></blockquote>
- (void)addRightLeftOnKeyboardWithTarget:(id __nullable)target leftButtonTitle:(NSString * __nonnull)leftButtonTitle rightButtonTitle:(NSString * __nonnull)rightButtonTitle rightButtonAction:(SEL __null_unspecified)rightButtonAction leftButtonAction:(SEL __null_unspecified)leftButtonAction;

/// Helper function to add Left and Right button on keyboard.
///
/// @param target Target object for selector.
/// @param leftButtonTitle Title for leftBarButtonItem, usually 'Cancel'.
/// @param rightButtonTitle Title for rightBarButtonItem, usually 'Done'.
/// @param leftButtonAction Left button action name. Usually 'cancelAction:(IQBarButtonItem*)item'.
/// @param rightButtonAction Right button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param titleText text to show as title in IQToolbar'.
- (void)addRightLeftOnKeyboardWithTarget:(id __nullable)target leftButtonTitle:(NSString * __nonnull)leftButtonTitle rightButtonTitle:(NSString * __nonnull)rightButtonTitle rightButtonAction:(SEL __null_unspecified)rightButtonAction leftButtonAction:(SEL __null_unspecified)leftButtonAction titleText:(NSString * __nullable)titleText;

/// Helper function to add Left and Right button on keyboard.
///
/// @param target Target object for selector.
/// @param leftButtonTitle Title for leftBarButtonItem, usually 'Cancel'.
/// @param rightButtonTitle Title for rightBarButtonItem, usually 'Done'.
/// @param leftButtonAction Left button action name. Usually 'cancelAction:(IQBarButtonItem*)item'.
/// @param rightButtonAction Right button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param shouldShowPlaceholder A boolean to indicate whether to show textField placeholder on IQToolbar'.
- (void)addRightLeftOnKeyboardWithTarget:(id __nullable)target leftButtonTitle:(NSString * __nonnull)leftButtonTitle rightButtonTitle:(NSString * __nonnull)rightButtonTitle rightButtonAction:(SEL __null_unspecified)rightButtonAction leftButtonAction:(SEL __null_unspecified)leftButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;

/// <dl><dt>-------------------------</dt><dd><p>MARK: Previous/Next/Done</p></dd></dl>
/// -------------------------
///
/// <blockquote><p>Helper function to add ArrowNextPrevious and Done button on keyboard.</p><p>@param target Target object for selector.
/// @param previousAction Previous button action name. Usually 'previousAction:(id)item'.
/// @param nextAction Next button action name. Usually 'nextAction:(id)item'.
/// @param doneAction Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.</p></blockquote>
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id __nullable)target previousAction:(SEL __null_unspecified)previousAction nextAction:(SEL __null_unspecified)nextAction doneAction:(SEL __null_unspecified)doneAction;

/// Helper function to add ArrowNextPrevious and Done button on keyboard.
///
/// @param target Target object for selector.
/// @param previousAction Previous button action name. Usually 'previousAction:(id)item'.
/// @param nextAction Next button action name. Usually 'nextAction:(id)item'.
/// @param doneAction Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param titleText text to show as title in IQToolbar'.
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id __nullable)target previousAction:(SEL __null_unspecified)previousAction nextAction:(SEL __null_unspecified)nextAction doneAction:(SEL __null_unspecified)doneAction titleText:(NSString * __nullable)titleText;

/// Helper function to add ArrowNextPrevious and Done button on keyboard.
///
/// @param target Target object for selector.
/// @param previousAction Previous button action name. Usually 'previousAction:(id)item'.
/// @param nextAction Next button action name. Usually 'nextAction:(id)item'.
/// @param doneAction Done button action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param shouldShowPlaceholder A boolean to indicate whether to show textField placeholder on IQToolbar'.
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id __nullable)target previousAction:(SEL __null_unspecified)previousAction nextAction:(SEL __null_unspecified)nextAction doneAction:(SEL __null_unspecified)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;

/// <dl><dt>--------------------------</dt><dd><p>MARK: Previous/Next/Right</p></dd></dl>
/// --------------------------
///
/// <blockquote><p>Helper function to add SegmentedNextPrevious/ArrowNextPrevious and Right button on keyboard.</p><p>@param target Target object for selector.
/// @param rightButtonTitle Title for rightBarButtonItem, usually 'Done'.
/// @param previousAction Previous button action name. Usually 'previousAction:(id)item'.
/// @param nextAction Next button action name. Usually 'nextAction:(id)item'.
/// @param rightButtonAction RightBarButton action name. Usually 'doneAction:(IQBarButtonItem*)item'.</p></blockquote>
- (void)addPreviousNextRightOnKeyboardWithTarget:(id __nullable)target rightButtonTitle:(NSString * __nonnull)rightButtonTitle previousAction:(SEL __null_unspecified)previousAction nextAction:(SEL __null_unspecified)nextAction rightButtonAction:(SEL __null_unspecified)rightButtonAction;

/// Helper function to add SegmentedNextPrevious/ArrowNextPrevious and Right button on keyboard.
///
/// @param target Target object for selector.
/// @param rightButtonTitle Title for rightBarButtonItem, usually 'Done'.
/// @param previousAction Previous button action name. Usually 'previousAction:(id)item'.
/// @param nextAction Next button action name. Usually 'nextAction:(id)item'.
/// @param rightButtonAction RightBarButton action name. Usually 'doneAction:(IQBarButtonItem*)item'.
/// @param titleText text to show as title in IQToolbar'.
- (void)addPreviousNextRightOnKeyboardWithTarget:(id __nullable)target rightButtonTitle:(NSString * __nonnull)rightButtonTitle previousAction:(SEL __null_unspecified)previousAction nextAction:(SEL __null_unspecified)nextAction rightButtonAction:(SEL __null_unspecified)rightButtonAction titleText:(NSString * __nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id __nullable)target rightButtonTitle:(NSString * __nonnull)rightButtonTitle previousAction:(SEL __null_unspecified)previousAction nextAction:(SEL __null_unspecified)nextAction rightButtonAction:(SEL __null_unspecified)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;

/// <dl><dt>-----------------------------------</dt><dd><p>MARK: Enable/Disable Previous/Next</p></dd></dl>
/// -----------------------------------
///
/// <blockquote><p>Helper function to enable and disable previous next buttons.</p><p>@param isPreviousEnabled BOOL to enable/disable previous button on keyboard.
/// @param isNextEnabled  BOOL to enable/disable next button on keyboard..</p></blockquote>
- (void)setEnablePrevious:(BOOL)isPreviousEnabled isNextEnabled:(BOOL)isNextEnabled;
@end

@class NSLayoutConstraint;

@interface UIViewController (SWIFT_EXTENSION(IQKeyboardManagerSwift))

/// To set customized distance from keyboard for textField/textView. Can't be less than zero
@property (nonatomic) IBOutlet NSLayoutConstraint * __nullable IQLayoutGuideConstraint;
@end


@interface UIWindow (SWIFT_EXTENSION(IQKeyboardManagerSwift))

/// @return Returns the current Top Most ViewController in hierarchy.   
- (UIViewController * __nullable)topMostController;

/// @return Returns the topViewController in stack of topMostController.    
- (UIViewController * __nullable)currentViewController;
@end

#pragma clang diagnostic pop
